[NAME]
CryptVerifySignature
[DESCRIPTION]
The CryptVerifySignature function is used to verify a signature against a hash object.
[DECLARATION]
Declare Function CryptVerifySignature Lib "advapi32.dll" Alias "CryptVerifySignatureA" (ByVal hHash As Long, ByVal pbSignature As String, ByVal dwSigLen As Long, ByVal hPubKey As Long, ByVal sDescription As String, ByVal dwFlags As Long) As Long
[VBNET]
System.Security.Cryptography.*
[OS]
Windows NT 4.0 or later; Windows 95 OSR2 or later (or Windows 95 with Internet Explorer 3.02 or later)
[LIBRARY]
Advapi32
[PARAMETERS]
· hHash
[in] A handle to the hash object to verify against.

· pbSignature
[in] The address of the signature data to be verified.

· dwSigLen
[in] The number of bytes in the pbSignature signature data.

· hPubKey
[in] A handle to the public key to use to authenticate the signature. This public key must belong to the key pair that was originally used to create the digital signature.

· sDescription
[in] String describing the signed data. This must be exactly the same string that was passed in to the CryptSignHash function when the signature was created. If this string does not match, the signature verification will fail.
When this function is called, some CSPs (not the Microsoft RSA Base Provider) will display this description string to the user, together with an indication of whether the signature verified correctly. This provides the user with the verification results in a way that is completely independent of the application.

· dwFlags
[in] The flag values. This parameter is reserved for future use and should always be zero.
[RETURNS]
If the function succeeds, the return value is nonzero. 

If the function fails, the return value is zero. To retrieve extended error information, use the GetLastError function. 

The following table lists the error codes most commonly returned by the GetLastError function. The error codes prefaced by “NTE” are generated by the particular CSP you are using.
ERROR_INVALID_HANDLE 
 One of the parameters specifies an invalid handle. 
 
ERROR_INVALID_PARAMETER 
 One of the parameters contains an invalid value. This is most often an illegal pointer. 
 
NTE_BAD_FLAGS 
 The dwFlags parameter is nonzero. 
 
NTE_BAD_HASH 
 The hash object specified by the hHash parameter is invalid. 
 
NTE_BAD_KEY 
 The hPubKey parameter does not contain a handle to a valid public key. 
 
NTE_BAD_SIGNATURE 
 The signature failed to verify. This could be because the data itself has changed, the description string did not match, or the wrong public key was specified by hPubKey. 

This error can also be returned if the hashing or signature algorithms do not match the ones used to create the signature. 
 
NTE_BAD_UID 
 The CSP context that was specified when the hash object was created cannot be found. 
 
NTE_NO_MEMORY 
 The CSP ran out of memory during the operation. 
[EXAMPLES]
Crypto*79AD4E0522A0A67A6E196BE52357E60B.html
[RELATED]
CryptCreateHash
CryptDestroyHash
CryptHashData
CryptSignHash
